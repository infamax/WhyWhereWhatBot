// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WhyWhereWhatServerClient is the client API for WhyWhereWhatServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhyWhereWhatServerClient interface {
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	Add(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserId, error)
	Delete(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Empty, error)
	GetScoreUser(ctx context.Context, in *TelegramId, opts ...grpc.CallOption) (*Score, error)
	GetTop(ctx context.Context, in *GetLeaderResponse, opts ...grpc.CallOption) (*Leader, error)
	GetQuestions(ctx context.Context, in *Url, opts ...grpc.CallOption) (*List, error)
	Exist(ctx context.Context, in *TelegramId, opts ...grpc.CallOption) (*ExistResponse, error)
	UpdateUserScore(ctx context.Context, in *UserTelegram, opts ...grpc.CallOption) (*Empty, error)
	GetPositionUser(ctx context.Context, in *TelegramId, opts ...grpc.CallOption) (*Position, error)
}

type whyWhereWhatServerClient struct {
	cc grpc.ClientConnInterface
}

func NewWhyWhereWhatServerClient(cc grpc.ClientConnInterface) WhyWhereWhatServerClient {
	return &whyWhereWhatServerClient{cc}
}

func (c *whyWhereWhatServerClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.WhyWhereWhatServer/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whyWhereWhatServerClient) Add(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := c.cc.Invoke(ctx, "/api.WhyWhereWhatServer/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whyWhereWhatServerClient) Delete(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.WhyWhereWhatServer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whyWhereWhatServerClient) GetScoreUser(ctx context.Context, in *TelegramId, opts ...grpc.CallOption) (*Score, error) {
	out := new(Score)
	err := c.cc.Invoke(ctx, "/api.WhyWhereWhatServer/GetScoreUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whyWhereWhatServerClient) GetTop(ctx context.Context, in *GetLeaderResponse, opts ...grpc.CallOption) (*Leader, error) {
	out := new(Leader)
	err := c.cc.Invoke(ctx, "/api.WhyWhereWhatServer/GetTop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whyWhereWhatServerClient) GetQuestions(ctx context.Context, in *Url, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/api.WhyWhereWhatServer/GetQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whyWhereWhatServerClient) Exist(ctx context.Context, in *TelegramId, opts ...grpc.CallOption) (*ExistResponse, error) {
	out := new(ExistResponse)
	err := c.cc.Invoke(ctx, "/api.WhyWhereWhatServer/Exist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whyWhereWhatServerClient) UpdateUserScore(ctx context.Context, in *UserTelegram, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.WhyWhereWhatServer/UpdateUserScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whyWhereWhatServerClient) GetPositionUser(ctx context.Context, in *TelegramId, opts ...grpc.CallOption) (*Position, error) {
	out := new(Position)
	err := c.cc.Invoke(ctx, "/api.WhyWhereWhatServer/GetPositionUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhyWhereWhatServerServer is the server API for WhyWhereWhatServer service.
// All implementations must embed UnimplementedWhyWhereWhatServerServer
// for forward compatibility
type WhyWhereWhatServerServer interface {
	Update(context.Context, *User) (*Empty, error)
	Add(context.Context, *User) (*UserId, error)
	Delete(context.Context, *UserId) (*Empty, error)
	GetScoreUser(context.Context, *TelegramId) (*Score, error)
	GetTop(context.Context, *GetLeaderResponse) (*Leader, error)
	GetQuestions(context.Context, *Url) (*List, error)
	Exist(context.Context, *TelegramId) (*ExistResponse, error)
	UpdateUserScore(context.Context, *UserTelegram) (*Empty, error)
	GetPositionUser(context.Context, *TelegramId) (*Position, error)
	mustEmbedUnimplementedWhyWhereWhatServerServer()
}

// UnimplementedWhyWhereWhatServerServer must be embedded to have forward compatible implementations.
type UnimplementedWhyWhereWhatServerServer struct {
}

func (UnimplementedWhyWhereWhatServerServer) Update(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWhyWhereWhatServerServer) Add(context.Context, *User) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedWhyWhereWhatServerServer) Delete(context.Context, *UserId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWhyWhereWhatServerServer) GetScoreUser(context.Context, *TelegramId) (*Score, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoreUser not implemented")
}
func (UnimplementedWhyWhereWhatServerServer) GetTop(context.Context, *GetLeaderResponse) (*Leader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTop not implemented")
}
func (UnimplementedWhyWhereWhatServerServer) GetQuestions(context.Context, *Url) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestions not implemented")
}
func (UnimplementedWhyWhereWhatServerServer) Exist(context.Context, *TelegramId) (*ExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exist not implemented")
}
func (UnimplementedWhyWhereWhatServerServer) UpdateUserScore(context.Context, *UserTelegram) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserScore not implemented")
}
func (UnimplementedWhyWhereWhatServerServer) GetPositionUser(context.Context, *TelegramId) (*Position, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionUser not implemented")
}
func (UnimplementedWhyWhereWhatServerServer) mustEmbedUnimplementedWhyWhereWhatServerServer() {}

// UnsafeWhyWhereWhatServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhyWhereWhatServerServer will
// result in compilation errors.
type UnsafeWhyWhereWhatServerServer interface {
	mustEmbedUnimplementedWhyWhereWhatServerServer()
}

func RegisterWhyWhereWhatServerServer(s grpc.ServiceRegistrar, srv WhyWhereWhatServerServer) {
	s.RegisterService(&WhyWhereWhatServer_ServiceDesc, srv)
}

func _WhyWhereWhatServer_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhyWhereWhatServerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WhyWhereWhatServer/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhyWhereWhatServerServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhyWhereWhatServer_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhyWhereWhatServerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WhyWhereWhatServer/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhyWhereWhatServerServer).Add(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhyWhereWhatServer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhyWhereWhatServerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WhyWhereWhatServer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhyWhereWhatServerServer).Delete(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhyWhereWhatServer_GetScoreUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhyWhereWhatServerServer).GetScoreUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WhyWhereWhatServer/GetScoreUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhyWhereWhatServerServer).GetScoreUser(ctx, req.(*TelegramId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhyWhereWhatServer_GetTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhyWhereWhatServerServer).GetTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WhyWhereWhatServer/GetTop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhyWhereWhatServerServer).GetTop(ctx, req.(*GetLeaderResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhyWhereWhatServer_GetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Url)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhyWhereWhatServerServer).GetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WhyWhereWhatServer/GetQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhyWhereWhatServerServer).GetQuestions(ctx, req.(*Url))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhyWhereWhatServer_Exist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhyWhereWhatServerServer).Exist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WhyWhereWhatServer/Exist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhyWhereWhatServerServer).Exist(ctx, req.(*TelegramId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhyWhereWhatServer_UpdateUserScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTelegram)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhyWhereWhatServerServer).UpdateUserScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WhyWhereWhatServer/UpdateUserScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhyWhereWhatServerServer).UpdateUserScore(ctx, req.(*UserTelegram))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhyWhereWhatServer_GetPositionUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhyWhereWhatServerServer).GetPositionUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WhyWhereWhatServer/GetPositionUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhyWhereWhatServerServer).GetPositionUser(ctx, req.(*TelegramId))
	}
	return interceptor(ctx, in, info, handler)
}

// WhyWhereWhatServer_ServiceDesc is the grpc.ServiceDesc for WhyWhereWhatServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhyWhereWhatServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.WhyWhereWhatServer",
	HandlerType: (*WhyWhereWhatServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _WhyWhereWhatServer_Update_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _WhyWhereWhatServer_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WhyWhereWhatServer_Delete_Handler,
		},
		{
			MethodName: "GetScoreUser",
			Handler:    _WhyWhereWhatServer_GetScoreUser_Handler,
		},
		{
			MethodName: "GetTop",
			Handler:    _WhyWhereWhatServer_GetTop_Handler,
		},
		{
			MethodName: "GetQuestions",
			Handler:    _WhyWhereWhatServer_GetQuestions_Handler,
		},
		{
			MethodName: "Exist",
			Handler:    _WhyWhereWhatServer_Exist_Handler,
		},
		{
			MethodName: "UpdateUserScore",
			Handler:    _WhyWhereWhatServer_UpdateUserScore_Handler,
		},
		{
			MethodName: "GetPositionUser",
			Handler:    _WhyWhereWhatServer_GetPositionUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
